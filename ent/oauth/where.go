// Code generated by ent, DO NOT EDIT.

package oauth

import (
	"scaffold/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OAuth {
	return predicate.OAuth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OAuth {
	return predicate.OAuth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OAuth {
	return predicate.OAuth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OAuth {
	return predicate.OAuth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OAuth {
	return predicate.OAuth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OAuth {
	return predicate.OAuth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OAuth {
	return predicate.OAuth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OAuth {
	return predicate.OAuth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OAuth {
	return predicate.OAuth(sql.FieldLTE(FieldID, id))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldEQ(FieldSubject, v))
}

// IssuerEQ applies the EQ predicate on the "issuer" field.
func IssuerEQ(v Issuer) predicate.OAuth {
	return predicate.OAuth(sql.FieldEQ(FieldIssuer, v))
}

// IssuerNEQ applies the NEQ predicate on the "issuer" field.
func IssuerNEQ(v Issuer) predicate.OAuth {
	return predicate.OAuth(sql.FieldNEQ(FieldIssuer, v))
}

// IssuerIn applies the In predicate on the "issuer" field.
func IssuerIn(vs ...Issuer) predicate.OAuth {
	return predicate.OAuth(sql.FieldIn(FieldIssuer, vs...))
}

// IssuerNotIn applies the NotIn predicate on the "issuer" field.
func IssuerNotIn(vs ...Issuer) predicate.OAuth {
	return predicate.OAuth(sql.FieldNotIn(FieldIssuer, vs...))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.OAuth {
	return predicate.OAuth(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.OAuth {
	return predicate.OAuth(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.OAuth {
	return predicate.OAuth(sql.FieldContainsFold(FieldSubject, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.OAuth {
	return predicate.OAuth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.OAuth {
	return predicate.OAuth(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuth) predicate.OAuth {
	return predicate.OAuth(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuth) predicate.OAuth {
	return predicate.OAuth(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuth) predicate.OAuth {
	return predicate.OAuth(sql.NotPredicates(p))
}
