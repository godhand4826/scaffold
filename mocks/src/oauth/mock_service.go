// Code generated by mockery v2.46.2. DO NOT EDIT.

package mockoauth

import (
	context "context"
	ent "scaffold/ent"

	mock "github.com/stretchr/testify/mock"

	oauth "scaffold/ent/oauth"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// LinkAndSignIn provides a mock function with given fields: ctx, issuer, subject, name, email, avatar
func (_m *MockService) LinkAndSignIn(ctx context.Context, issuer oauth.Issuer, subject string, name string, email string, avatar string) (*ent.User, error) {
	ret := _m.Called(ctx, issuer, subject, name, email, avatar)

	if len(ret) == 0 {
		panic("no return value specified for LinkAndSignIn")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oauth.Issuer, string, string, string, string) (*ent.User, error)); ok {
		return rf(ctx, issuer, subject, name, email, avatar)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oauth.Issuer, string, string, string, string) *ent.User); ok {
		r0 = rf(ctx, issuer, subject, name, email, avatar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oauth.Issuer, string, string, string, string) error); ok {
		r1 = rf(ctx, issuer, subject, name, email, avatar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_LinkAndSignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkAndSignIn'
type MockService_LinkAndSignIn_Call struct {
	*mock.Call
}

// LinkAndSignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - issuer oauth.Issuer
//   - subject string
//   - name string
//   - email string
//   - avatar string
func (_e *MockService_Expecter) LinkAndSignIn(ctx interface{}, issuer interface{}, subject interface{}, name interface{}, email interface{}, avatar interface{}) *MockService_LinkAndSignIn_Call {
	return &MockService_LinkAndSignIn_Call{Call: _e.mock.On("LinkAndSignIn", ctx, issuer, subject, name, email, avatar)}
}

func (_c *MockService_LinkAndSignIn_Call) Run(run func(ctx context.Context, issuer oauth.Issuer, subject string, name string, email string, avatar string)) *MockService_LinkAndSignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oauth.Issuer), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockService_LinkAndSignIn_Call) Return(_a0 *ent.User, _a1 error) *MockService_LinkAndSignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_LinkAndSignIn_Call) RunAndReturn(run func(context.Context, oauth.Issuer, string, string, string, string) (*ent.User, error)) *MockService_LinkAndSignIn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
